package com.tririga.ws;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

/**
 * This class was generated by Apache CXF 3.5.0
 * 2022-04-30T12:18:29.783+05:30
 * Generated source version: 3.5.0
 */
@WebService(targetNamespace = "http://ws.tririga.com", name = "TririgaWSPortType")
@XmlSeeAlso({com.tririga.ws.dto.gui.ObjectFactory.class, com.tririga.ws.dto.ObjectFactory.class, com.tririga.ws.dto.content.ObjectFactory.class, ObjectFactory.class, com.tririga.ws.errors.ObjectFactory.class})
public interface TririgaWSPortType {

    @WebMethod
    @RequestWrapper(localName = "uploadFrom", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.UploadFrom")
    @ResponseWrapper(localName = "uploadFromResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.UploadFromResponse")
    @WebResult(name = "reponses", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.content.Response[] uploadFrom(

            @WebParam(name = "contents", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.content.Content[] contents
    );

    @WebMethod
    @RequestWrapper(localName = "getDefaultGuiId", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetDefaultGuiId")
    @ResponseWrapper(localName = "getDefaultGuiIdResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetDefaultGuiIdResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public long getDefaultGuiId(

            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId
    ) throws Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getCurrencies", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetCurrencies")
    @ResponseWrapper(localName = "getCurrenciesResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetCurrenciesResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.Currency[] getCurrencies()
            throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getChildren", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetChildren")
    @ResponseWrapper(localName = "getChildrenResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetChildrenResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ChildRecord[] getChildren(

            @WebParam(name = "recordId", targetNamespace = "http://ws.tririga.com")
                    long recordId
    ) throws Exception, InvalidArgumentException, RecordDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "getAssociationDefinitionsByName", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAssociationDefinitionsByName")
    @ResponseWrapper(localName = "getAssociationDefinitionsByNameResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAssociationDefinitionsByNameResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.AssociationDefinition[] getAssociationDefinitionsByName(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName
    ) throws Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getRecordState", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetRecordState")
    @ResponseWrapper(localName = "getRecordStateResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetRecordStateResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.State[] getRecordState(

            @WebParam(name = "recordIds", targetNamespace = "http://ws.tririga.com")
                    long[] recordIds
    ) throws Exception, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "keywordSearch", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.KeywordSearch")
    @ResponseWrapper(localName = "keywordSearchResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.KeywordSearchResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.KeywordSearchResult[] keywordSearch(

            @WebParam(name = "projectId", targetNamespace = "http://ws.tririga.com")
                    Long projectId,
            @WebParam(name = "moduleId", targetNamespace = "http://ws.tririga.com")
                    long moduleId,
            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId,
            @WebParam(name = "keyword", targetNamespace = "http://ws.tririga.com")
                    String keyword
    ) throws ModuleDoesNotExistException, ObjectTypeDoesNotExistException, InvalidArgumentException, ProjectDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "getModules", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetModules")
    @ResponseWrapper(localName = "getModulesResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetModulesResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.Module[] getModules()
            throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getGUIsByName", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetGUIsByName")
    @ResponseWrapper(localName = "getGUIsByNameResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetGUIsByNameResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.gui.GUI[] getGUIsByName(

            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName,
            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName
    ) throws Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "runNamedQueryContinue", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryContinue")
    @ResponseWrapper(localName = "runNamedQueryContinueResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryContinueResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.QueryResult runNamedQueryContinue(

            @WebParam(name = "continuationToken", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.ContinuationToken continuationToken
    ) throws InvalidContinuationTokenException, Exception;

    @WebMethod
    @RequestWrapper(localName = "getProjects", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetProjects")
    @ResponseWrapper(localName = "getProjectsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetProjectsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.Project[] getProjects()
            throws Exception;

    @WebMethod
    @RequestWrapper(localName = "triggerActions", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.TriggerActions")
    @ResponseWrapper(localName = "triggerActionsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.TriggerActionsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelperHeader triggerActions(

            @WebParam(name = "TriggerActions", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.TriggerActions[] triggerActions
    ) throws Exception, RecordDoesNotExistException, ActionDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "getObjectTypeListByModuleId", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeListByModuleId")
    @ResponseWrapper(localName = "getObjectTypeListByModuleIdResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeListByModuleIdResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.BaseObjectType[] getObjectTypeListByModuleId(

            @WebParam(name = "moduleId", targetNamespace = "http://ws.tririga.com")
                    long moduleId,
            @WebParam(name = "isStandAlone", targetNamespace = "http://ws.tririga.com")
                    boolean isStandAlone
    ) throws ModuleDoesNotExistException, Exception, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getHttpSession", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetHttpSession")
    @ResponseWrapper(localName = "getHttpSessionResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetHttpSessionResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.HttpSession getHttpSession()
            ;

    @WebMethod
    @RequestWrapper(localName = "getContentLength", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetContentLength")
    @ResponseWrapper(localName = "getContentLengthResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetContentLengthResponse")
    @WebResult(name = "length", targetNamespace = "http://ws.tririga.com")
    public Long getContentLength(

            @WebParam(name = "content", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.content.Content content
    ) throws AccessException, InvalidContentException, InvalidDocumentTypeException;

    @WebMethod
    @RequestWrapper(localName = "getAllAssociatedRecords", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAllAssociatedRecords")
    @ResponseWrapper(localName = "getAllAssociatedRecordsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAllAssociatedRecordsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.AssociationRecord[] getAllAssociatedRecords(

            @WebParam(name = "recordIds", targetNamespace = "http://ws.tririga.com")
                    long[] recordIds,
            @WebParam(name = "associationString", targetNamespace = "http://ws.tririga.com")
                    String associationString,
            @WebParam(name = "maxResults", targetNamespace = "http://ws.tririga.com")
                    Integer maxResults
    ) throws ModuleDoesNotExistException, Exception, ObjectTypeDoesNotExistException, RecordDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "downloadTo", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.DownloadTo")
    @ResponseWrapper(localName = "downloadToResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.DownloadToResponse")
    @WebResult(name = "reponses", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.content.Response[] downloadTo(

            @WebParam(name = "contents", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.content.Content[] contents
    );

    @WebMethod
    @RequestWrapper(localName = "runNamedMetricQuery", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedMetricQuery")
    @ResponseWrapper(localName = "runNamedMetricQueryResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedMetricQueryResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.MetricQueryResult runNamedMetricQuery(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName,
            @WebParam(name = "queryName", targetNamespace = "http://ws.tririga.com")
                    String queryName,
            @WebParam(name = "metricQueryfilters", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.MetricQueryFilter[] metricQueryfilters,
            @WebParam(name = "groupBy", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.GroupBy groupBy,
            @WebParam(name = "start", targetNamespace = "http://ws.tririga.com")
                    int start,
            @WebParam(name = "maximumResultCount", targetNamespace = "http://ws.tririga.com")
                    int maximumResultCount
    ) throws ModuleDoesNotExistException, QueryDoesNotExistException, ObjectTypeDoesNotExistException, InvalidArgumentException, RecordDoesNotExistException, Exception;

    @WebMethod
    @RequestWrapper(localName = "runNamedQueryMultiBoContinue", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryMultiBoContinue")
    @ResponseWrapper(localName = "runNamedQueryMultiBoContinueResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryMultiBoContinueResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.QueryMultiBoResult runNamedQueryMultiBoContinue(

            @WebParam(name = "continuationToken", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.ContinuationToken continuationToken
    ) throws InvalidContinuationTokenException, Exception;

    @WebMethod
    @RequestWrapper(localName = "download", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.Download")
    @ResponseWrapper(localName = "downloadResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.DownloadResponse")
    @WebResult(name = "return", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.content.Response download(

            @WebParam(name = "content", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.content.Content content
    ) throws AccessException, InvalidContentException, InvalidDocumentTypeException;

    @WebMethod
    @RequestWrapper(localName = "getRequiredGuiFieldNames", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetRequiredGuiFieldNames")
    @ResponseWrapper(localName = "getRequiredGuiFieldNamesResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetRequiredGuiFieldNamesResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelperHeader getRequiredGuiFieldNames(

            @WebParam(name = "guiId", targetNamespace = "http://ws.tririga.com")
                    long guiId
    ) throws Exception;

    @WebMethod
    @RequestWrapper(localName = "runNamedMetricQueryContinue", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedMetricQueryContinue")
    @ResponseWrapper(localName = "runNamedMetricQueryContinueResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedMetricQueryContinueResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.MetricQueryResult runNamedMetricQueryContinue(

            @WebParam(name = "continuationToken", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.ContinuationToken continuationToken
    ) throws InvalidContinuationTokenException, Exception;

    @WebMethod
    @RequestWrapper(localName = "getAssociationDefinitions", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAssociationDefinitions")
    @ResponseWrapper(localName = "getAssociationDefinitionsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAssociationDefinitionsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.AssociationDefinition[] getAssociationDefinitions(

            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId
    ) throws Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getRecordDataHeaders", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetRecordDataHeaders")
    @ResponseWrapper(localName = "getRecordDataHeadersResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetRecordDataHeadersResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.Record[] getRecordDataHeaders(

            @WebParam(name = "recordIds", targetNamespace = "http://ws.tririga.com")
                    long[] recordIds
    ) throws Exception, InvalidArgumentException, RecordDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "saveRecord", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.SaveRecord")
    @ResponseWrapper(localName = "saveRecordResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.SaveRecordResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelperHeader saveRecord(

            @WebParam(name = "IntegrationRecords", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.IntegrationRecord[] integrationRecords
    ) throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getCurrencyConversionRates", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetCurrencyConversionRates")
    @ResponseWrapper(localName = "getCurrencyConversionRatesResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetCurrencyConversionRatesResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.CurrencyConversionRate[] getCurrencyConversionRates()
            throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getAvailableActions", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAvailableActions")
    @ResponseWrapper(localName = "getAvailableActionsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAvailableActionsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.AvailableAction[] getAvailableActions(

            @WebParam(name = "recordIds", targetNamespace = "http://ws.tririga.com")
                    long[] recordIds
    ) throws Exception, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getHierarchyMetadataByModuleName", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetHierarchyMetadataByModuleName")
    @ResponseWrapper(localName = "getHierarchyMetadataByModuleNameResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetHierarchyMetadataByModuleNameResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.HierarchyObjectType getHierarchyMetadataByModuleName(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName
    ) throws ModuleDoesNotExistException, Exception;

    @WebMethod
    @RequestWrapper(localName = "upload", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.Upload")
    @ResponseWrapper(localName = "uploadResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.UploadResponse")
    @WebResult(name = "return", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.content.Response upload(

            @WebParam(name = "content", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.content.Content content
    ) throws AccessException, InvalidContentException, InvalidDocumentTypeException;

    @WebMethod
    @RequestWrapper(localName = "getDefaultGUI", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetDefaultGUI")
    @ResponseWrapper(localName = "getDefaultGUIResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetDefaultGUIResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.gui.GUI getDefaultGUI(

            @WebParam(name = "recordId", targetNamespace = "http://ws.tririga.com")
                    long recordId
    ) throws Exception, GuiDoesNotExistException, RecordDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "getTargetRecords", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetTargetRecords")
    @ResponseWrapper(localName = "getTargetRecordsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetTargetRecordsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.Association[] getTargetRecords(

            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId,
            @WebParam(name = "sectionName", targetNamespace = "http://ws.tririga.com")
                    String sectionName
    ) throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getObjectTypeId", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeId")
    @ResponseWrapper(localName = "getObjectTypeIdResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeIdResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public long getObjectTypeId(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName
    ) throws Exception, ObjectTypeDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "getDefaultGUIStructure", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetDefaultGUIStructure")
    @ResponseWrapper(localName = "getDefaultGUIStructureResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetDefaultGUIStructureResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.gui.GUI getDefaultGUIStructure(

            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId
    ) throws Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getRootRecordId", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetRootRecordId")
    @ResponseWrapper(localName = "getRootRecordIdResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetRootRecordIdResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelper getRootRecordId(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName
    ) throws ModuleDoesNotExistException, Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getGUI", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetGUI")
    @ResponseWrapper(localName = "getGUIResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetGUIResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.gui.GUI getGUI(

            @WebParam(name = "guiId", targetNamespace = "http://ws.tririga.com")
                    long guiId,
            @WebParam(name = "recordId", targetNamespace = "http://ws.tririga.com")
                    long recordId
    ) throws Exception, GuiDoesNotExistException, RecordDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "putCurrencyConversionRates", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.PutCurrencyConversionRates")
    @ResponseWrapper(localName = "putCurrencyConversionRatesResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.PutCurrencyConversionRatesResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.CurrencyConversionRate[] putCurrencyConversionRates(

            @WebParam(name = "CurrencyConversionRates", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.CurrencyConversionRate[] currencyConversionRates
    ) throws Exception, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getHierarchyMetadata", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetHierarchyMetadata")
    @ResponseWrapper(localName = "getHierarchyMetadataResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetHierarchyMetadataResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.HierarchyObjectType getHierarchyMetadata(

            @WebParam(name = "moduleId", targetNamespace = "http://ws.tririga.com")
                    long moduleId,
            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId
    ) throws ModuleDoesNotExistException, Exception, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "acceptActionItems", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.AcceptActionItems")
    @ResponseWrapper(localName = "acceptActionItemsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.AcceptActionItemsResponse")
    public void acceptActionItems(

            @WebParam(name = "ActionItems", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.ActionItem[] actionItems
    ) throws Exception, ActionItemInvalidException;

    @WebMethod
    @RequestWrapper(localName = "getNamedQueryType", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetNamedQueryType")
    @ResponseWrapper(localName = "getNamedQueryTypeResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetNamedQueryTypeResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public String getNamedQueryType(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName,
            @WebParam(name = "queryName", targetNamespace = "http://ws.tririga.com")
                    String queryName
    ) throws ModuleDoesNotExistException, Exception, QueryDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "getActionItems", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetActionItems")
    @ResponseWrapper(localName = "getActionItemsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetActionItemsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ActionItem[] getActionItems()
            throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getGUIs", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetGUIs")
    @ResponseWrapper(localName = "getGUIsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetGUIsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.gui.GUI[] getGUIs(

            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId
    ) throws Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "deassociateRecords", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.DeassociateRecords")
    @ResponseWrapper(localName = "deassociateRecordsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.DeassociateRecordsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelperHeader deassociateRecords(

            @WebParam(name = "Associations", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.Association[] associations
    ) throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getContentFieldsDefinition", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetContentFieldsDefinition")
    @ResponseWrapper(localName = "getContentFieldsDefinitionResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetContentFieldsDefinitionResponse")
    @WebResult(name = "contentFields", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.content.ContentField[] getContentFieldsDefinition(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "boName", targetNamespace = "http://ws.tririga.com")
                    String boName
    ) throws ModuleDoesNotExistException, ObjectTypeDoesNotExistException, AccessException;

    @WebMethod
    @RequestWrapper(localName = "associateRecords", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.AssociateRecords")
    @ResponseWrapper(localName = "associateRecordsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.AssociateRecordsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelperHeader associateRecords(

            @WebParam(name = "Associations", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.Association[] associations
    ) throws Exception;

    @WebMethod
    @RequestWrapper(localName = "register", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.Register")
    @ResponseWrapper(localName = "registerResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RegisterResponse")
    public void register(

            @WebParam(name = "arg0", targetNamespace = "http://ws.tririga.com")
                    long arg0
    ) throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getUserLicenses", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetUserLicenses")
    @ResponseWrapper(localName = "getUserLicensesResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetUserLicensesResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelper[] getUserLicenses()
            ;

    @WebMethod
    @RequestWrapper(localName = "getGUIStateTransitions", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetGUIStateTransitions")
    @ResponseWrapper(localName = "getGUIStateTransitionsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetGUIStateTransitionsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.State[] getGUIStateTransitions(

            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId,
            @WebParam(name = "guiId", targetNamespace = "http://ws.tririga.com")
                    long guiId
    ) throws Exception, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "terminateSession", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.TerminateSession")
    @ResponseWrapper(localName = "terminateSessionResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.TerminateSessionResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelper terminateSession(

            @WebParam(name = "id", targetNamespace = "http://ws.tririga.com")
                    long id
    ) throws Exception;

    @WebMethod
    @RequestWrapper(localName = "getObjectTypeListByModuleName", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeListByModuleName")
    @ResponseWrapper(localName = "getObjectTypeListByModuleNameResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeListByModuleNameResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.BaseObjectType[] getObjectTypeListByModuleName(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "isStandAlone", targetNamespace = "http://ws.tririga.com")
                    boolean isStandAlone
    ) throws ModuleDoesNotExistException, Exception, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "runDynamicQuery", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunDynamicQuery")
    @ResponseWrapper(localName = "runDynamicQueryResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunDynamicQueryResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.QueryResult runDynamicQuery(

            @WebParam(name = "projectName", targetNamespace = "http://ws.tririga.com")
                    String projectName,
            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeNames", targetNamespace = "http://ws.tririga.com")
                    String[] objectTypeNames,
            @WebParam(name = "guiNames", targetNamespace = "http://ws.tririga.com")
                    String[] guiNames,
            @WebParam(name = "associatedModuleName", targetNamespace = "http://ws.tririga.com")
                    String associatedModuleName,
            @WebParam(name = "associatedObjectTypeName", targetNamespace = "http://ws.tririga.com")
                    String associatedObjectTypeName,
            @WebParam(name = "projectScope", targetNamespace = "http://ws.tririga.com")
                    int projectScope,
            @WebParam(name = "displayFields", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.DisplayLabel[] displayFields,
            @WebParam(name = "associatedDisplayFields", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.DisplayLabel[] associatedDisplayFields,
            @WebParam(name = "fieldSortOrders", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.FieldSortOrder[] fieldSortOrders,
            @WebParam(name = "filters", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.Filter[] filters,
            @WebParam(name = "associationFilters", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.AssociationFilter[] associationFilters,
            @WebParam(name = "start", targetNamespace = "http://ws.tririga.com")
                    int start,
            @WebParam(name = "maximumResultCount", targetNamespace = "http://ws.tririga.com")
                    int maximumResultCount
    ) throws ModuleDoesNotExistException, ProjectDoesNotExistException, ObjectTypeDoesNotExistException, InvalidArgumentException, RecordDoesNotExistException, Exception;

    @WebMethod
    @RequestWrapper(localName = "runNamedQueryMultiBoLocalized", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryMultiBoLocalized")
    @ResponseWrapper(localName = "runNamedQueryMultiBoLocalizedResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryMultiBoLocalizedResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.QueryMultiBoResult runNamedQueryMultiBoLocalized(

            @WebParam(name = "projectName", targetNamespace = "http://ws.tririga.com")
                    String projectName,
            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName,
            @WebParam(name = "queryName", targetNamespace = "http://ws.tririga.com")
                    String queryName,
            @WebParam(name = "filters", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.Filter[] filters,
            @WebParam(name = "start", targetNamespace = "http://ws.tririga.com")
                    int start,
            @WebParam(name = "maximumResultCount", targetNamespace = "http://ws.tririga.com")
                    int maximumResultCount
    ) throws ModuleDoesNotExistException, QueryDoesNotExistException, ProjectDoesNotExistException, ObjectTypeDoesNotExistException, InvalidArgumentException, RecordDoesNotExistException, Exception;

    @WebMethod
    @RequestWrapper(localName = "getDefaultGUIActions", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetDefaultGUIActions")
    @ResponseWrapper(localName = "getDefaultGUIActionsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetDefaultGUIActionsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.Transition[] getDefaultGUIActions(

            @WebParam(name = "guiId", targetNamespace = "http://ws.tririga.com")
                    long guiId
    ) throws GuiDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "runNamedQueryMultiBo", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryMultiBo")
    @ResponseWrapper(localName = "runNamedQueryMultiBoResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryMultiBoResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.QueryMultiBoResult runNamedQueryMultiBo(

            @WebParam(name = "projectName", targetNamespace = "http://ws.tririga.com")
                    String projectName,
            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName,
            @WebParam(name = "queryName", targetNamespace = "http://ws.tririga.com")
                    String queryName,
            @WebParam(name = "filters", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.Filter[] filters,
            @WebParam(name = "start", targetNamespace = "http://ws.tririga.com")
                    int start,
            @WebParam(name = "maximumResultCount", targetNamespace = "http://ws.tririga.com")
                    int maximumResultCount
    ) throws ModuleDoesNotExistException, QueryDoesNotExistException, ProjectDoesNotExistException, ObjectTypeDoesNotExistException, InvalidArgumentException, RecordDoesNotExistException, Exception;

    @WebMethod
    @RequestWrapper(localName = "getApplicationInfo", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetApplicationInfo")
    @ResponseWrapper(localName = "getApplicationInfoResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetApplicationInfoResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ApplicationInfo getApplicationInfo()
            ;

    @WebMethod
    @RequestWrapper(localName = "runDynamicQueryContinue", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunDynamicQueryContinue")
    @ResponseWrapper(localName = "runDynamicQueryContinueResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunDynamicQueryContinueResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.QueryResult runDynamicQueryContinue(

            @WebParam(name = "continuationToken", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.ContinuationToken continuationToken
    ) throws InvalidContinuationTokenException, Exception;

    @WebMethod
    @RequestWrapper(localName = "getObjectTypeActions", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeActions")
    @ResponseWrapper(localName = "getObjectTypeActionsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeActionsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ObjectTypeAction getObjectTypeActions(

            @WebParam(name = "moduleId", targetNamespace = "http://ws.tririga.com")
                    long moduleId,
            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId,
            @WebParam(name = "recordId", targetNamespace = "http://ws.tririga.com")
                    long recordId,
            @WebParam(name = "guiId", targetNamespace = "http://ws.tririga.com")
                    long guiId
    ) throws InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getHierarchyMetadataByModuleId", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetHierarchyMetadataByModuleId")
    @ResponseWrapper(localName = "getHierarchyMetadataByModuleIdResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetHierarchyMetadataByModuleIdResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.HierarchyObjectType getHierarchyMetadataByModuleId(

            @WebParam(name = "moduleId", targetNamespace = "http://ws.tririga.com")
                    long moduleId
    ) throws ModuleDoesNotExistException, Exception;

    @WebMethod
    @RequestWrapper(localName = "copy", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.Copy")
    @ResponseWrapper(localName = "copyResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.CopyResponse")
    @WebResult(name = "status", targetNamespace = "http://ws.tririga.com")
    public String copy(

            @WebParam(name = "fromRecordId", targetNamespace = "http://ws.tririga.com")
                    long fromRecordId,
            @WebParam(name = "toRecordId", targetNamespace = "http://ws.tririga.com")
                    long toRecordId
    ) throws AccessException, RecordDoesNotExistException, InvalidContentException, InvalidDocumentTypeException;

    @WebMethod
    @RequestWrapper(localName = "runNamedQuery", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQuery")
    @ResponseWrapper(localName = "runNamedQueryResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.RunNamedQueryResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.QueryResult runNamedQuery(

            @WebParam(name = "projectName", targetNamespace = "http://ws.tririga.com")
                    String projectName,
            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName,
            @WebParam(name = "queryName", targetNamespace = "http://ws.tririga.com")
                    String queryName,
            @WebParam(name = "filters", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.Filter[] filters,
            @WebParam(name = "start", targetNamespace = "http://ws.tririga.com")
                    int start,
            @WebParam(name = "maximumResultCount", targetNamespace = "http://ws.tririga.com")
                    int maximumResultCount
    ) throws ModuleDoesNotExistException, QueryDoesNotExistException, ProjectDoesNotExistException, ObjectTypeDoesNotExistException, InvalidArgumentException, RecordDoesNotExistException, Exception;

    @WebMethod
    @RequestWrapper(localName = "getAssociatedRecords", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAssociatedRecords")
    @ResponseWrapper(localName = "getAssociatedRecordsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetAssociatedRecordsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.Association[] getAssociatedRecords(

            @WebParam(name = "recordId", targetNamespace = "http://ws.tririga.com")
                    long recordId,
            @WebParam(name = "associationString", targetNamespace = "http://ws.tririga.com")
                    String associationString,
            @WebParam(name = "maxResults", targetNamespace = "http://ws.tririga.com")
                    Integer maxResults
    ) throws ModuleDoesNotExistException, Exception, ObjectTypeDoesNotExistException, InvalidArgumentException, RecordDoesNotExistException;

    @WebMethod
    @RequestWrapper(localName = "deleteCurrencyConversionRates", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.DeleteCurrencyConversionRates")
    @ResponseWrapper(localName = "deleteCurrencyConversionRatesResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.DeleteCurrencyConversionRatesResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ResponseHelperHeader deleteCurrencyConversionRates(

            @WebParam(name = "conversionRateIds", targetNamespace = "http://ws.tririga.com")
                    long[] conversionRateIds
    ) throws Exception, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getObjectTypeByName", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeByName")
    @ResponseWrapper(localName = "getObjectTypeByNameResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeByNameResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ObjectType getObjectTypeByName(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName,
            @WebParam(name = "objectTypeName", targetNamespace = "http://ws.tririga.com")
                    String objectTypeName
    ) throws Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getObjectType", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectType")
    @ResponseWrapper(localName = "getObjectTypeResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetObjectTypeResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ObjectType getObjectType(

            @WebParam(name = "objectTypeId", targetNamespace = "http://ws.tririga.com")
                    long objectTypeId
    ) throws Exception, ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getCurrencyConversionGroups", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetCurrencyConversionGroups")
    @ResponseWrapper(localName = "getCurrencyConversionGroupsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetCurrencyConversionGroupsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ConversionGroup[] getCurrencyConversionGroups()
            throws Exception;

    @WebMethod
    @RequestWrapper(localName = "delete", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.DeleteResponse")
    public void delete(

            @WebParam(name = "content", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.content.Content content,
            @WebParam(mode = WebParam.Mode.OUT, name = "content", targetNamespace = "http://ws.tririga.com")
                    javax.xml.ws.Holder<com.tririga.ws.dto.content.Response> content1
    ) throws InvalidContentException, InvalidDocumentTypeException;

    @WebMethod
    @RequestWrapper(localName = "getListItems", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetListItems")
    @ResponseWrapper(localName = "getListItemsResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetListItemsResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ListItem[] getListItems(

            @WebParam(name = "listId", targetNamespace = "http://ws.tririga.com")
                    long listId
    ) throws ListDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getChecksum", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetChecksum")
    @ResponseWrapper(localName = "getChecksumResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetChecksumResponse")
    @WebResult(name = "checksum", targetNamespace = "http://ws.tririga.com")
    public Long getChecksum(

            @WebParam(name = "content", targetNamespace = "http://ws.tririga.com")
                    com.tririga.ws.dto.content.Content content
    ) throws AccessException, InvalidContentException, InvalidDocumentTypeException;

    @WebMethod
    @RequestWrapper(localName = "getModuleId", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetModuleId")
    @ResponseWrapper(localName = "getModuleIdResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetModuleIdResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public int getModuleId(

            @WebParam(name = "moduleName", targetNamespace = "http://ws.tririga.com")
                    String moduleName
    ) throws ModuleDoesNotExistException, Exception;

    @WebMethod
    @RequestWrapper(localName = "getListByTypes", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetListByTypes")
    @ResponseWrapper(localName = "getListByTypesResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetListByTypesResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public com.tririga.ws.dto.ListType[] getListByTypes(

            @WebParam(name = "objectTypeIds", targetNamespace = "http://ws.tririga.com")
                    long[] objectTypeIds
    ) throws ObjectTypeDoesNotExistException, InvalidArgumentException;

    @WebMethod
    @RequestWrapper(localName = "getProjectId", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetProjectId")
    @ResponseWrapper(localName = "getProjectIdResponse", targetNamespace = "http://ws.tririga.com", className = "com.tririga.ws.GetProjectIdResponse")
    @WebResult(name = "out", targetNamespace = "http://ws.tririga.com")
    public long getProjectId(

            @WebParam(name = "projectName", targetNamespace = "http://ws.tririga.com")
                    String projectName
    ) throws Exception;
}
